#!/bin/sh
# Recommendation: Place this file in source control.
# Auto-generated by `./dk dksdk.project.new` of SquirrelScout.
#
# Install CMake if not pre-installed
# * CMake does not provide 32-bit binaries. But pypi does at https://pypi.org/project/cmake/
set -euf

dkml_host_abi=$1
shift
abi_pattern=$1
shift
destination_dir=$1
shift

install -d "$destination_dir/bin"

# Regardless of what the host ABI is, we want to download tools for the host architecture.
# For example, dkml_host_abi can be linux_x86 (meaning compiling will use `gcc -m32` or
# equivalent), but we want 64-bit tools if the host architecture is 64-bit. In fact,
# the tools may have to be 64-bit if the host architecture is 64-bit because the machine
# may not support 32-bit executables.
HOST_ARCH=$(uname -m)

# Ensure basic download tools like wget and unzip are available.
install_prog() {
  install_prog_NAME=$1
  shift
  install_prog_PKG=$1
  shift
  if [ ! -e "/usr/bin/$install_prog_NAME" ]; then
    if command -v yum; then
      if [ "$(id -u)" -eq 0 ]; then
        yum install -y "$install_prog_PKG"
      else
        echo "Running: sudo yum install -y $install_prog_PKG"
        sudo yum install -y "$install_prog_PKG"
      fi
    else
      if [ "$(id -u)" -eq 0 ]; then
        apt-get -q install -y "$install_prog_PKG"
      else
        echo "Running: sudo apt-get -qq install -y --no-install-suggests $install_prog_PKG"
        sudo apt-get -qq install -y --no-install-suggests "$install_prog_PKG"
      fi
    fi
  fi
}
case $dkml_host_abi in
  linux_*)
    install_prog wget wget
    install_prog unzip unzip
    install_prog rsync rsync
    install_prog git git # This is for CMake to do FetchContent()
    install_prog file file # This is for tests/inspect-target/
    ;;
esac

#   download_cmake is DEPRECATED. We have the same logic in ./dk
#   and ./dk.cmd
cmake_base=
download_cmake() {
  case $dkml_host_abi,$HOST_ARCH in
    darwin_*,*) brew install cmake ;;
    windows_x86,*)
      cmake_majmin_ver=3.25
      curl -L https://files.pythonhosted.org/packages/f2/e0/b3d9d35a1c290e319dc787fd65f100f968c846314a3b40fab91c51d15274/cmake-3.25.2-py2.py3-none-win32.whl \
        -o cmake.whl
      printf "%s  %s" "36407f07f6241258fbe05c937304f52a9a8291fcc8e709c2fa1970632dc27aa3" cmake.whl | \
        sha256sum -c ;;
    windows_x86_64,*)
      cmake_majminpat_ver=3.25.2
      cmake_base=cmake-$cmake_majminpat_ver-windows-x86_64
      curl -L "https://github.com/Kitware/CMake/releases/download/v$cmake_majminpat_ver/$cmake_base.zip" \
        -o cmake.zip
      printf "%s  %s" "0db9d3cebf894f64751141253fb9d9e310f325e2e03044f61249a359d6adf301" cmake.zip | \
        sha256sum -c ;;
    # ManyLinux2014 has https://github.com/scikit-build/cmake-python-distributions/issues/221
    # even on 3.24.2. That is, cmake_path(GET xxx PARENT_PATH yyy) sets yyy:=xxx.
    # So no `opamrun exec -- yum install -y cmake`.
    linux_x86_64,*|linux_*,x86_64)
      cmake_majminpat_ver=3.25.2
      cmake_base=cmake-3.25.2-linux-x86_64
      wget "https://github.com/Kitware/CMake/releases/download/v$cmake_majminpat_ver/$cmake_base.tar.gz" \
        --no-verbose -O cmake.tar.gz
      printf "%s  %s" "783da74f132fd1fea91b8236d267efa4df5b91c5eec1dea0a87f0cf233748d99" cmake.tar.gz | \
        sha256sum -c ;;
    linux_x86,*)
      cmake_majmin_ver=3.25
      wget https://files.pythonhosted.org/packages/11/6e/aeeddf2f5b16542b6a30ceab4896421e8705d8e9a9296dba79395db11b00/cmake-3.25.2-py2.py3-none-manylinux_2_17_i686.manylinux2014_i686.whl \
        --no-verbose -O cmake.whl
      printf "%s  %s" "715ef82e81b48db3e4c7744614c15ff361d53f6987fd70b1b66b0880595f2e2c" cmake.whl | \
        sha256sum -c ;;
  esac
}
download_ninja() {
  case $dkml_host_abi in
    darwin_*) brew install ninja ;;
    windows_*)
      curl -L https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip \
        -o ninja.zip
      printf "%s  %s" "524b344a1a9a55005eaf868d991e090ab8ce07fa109f1820d40e74642e289abc" ninja.zip | \
        sha256sum -c ;;
    linux_*) install_prog ninja ninja-build ;;
  esac
}
java_base=
download_java() {
  # We use Temurin for JDK when needed. Recommended by https://formulae.brew.sh/cask/android-commandlinetools.
  # Java is needed to run the Android SDK Manager.
  # https://adoptium.net/marketplace/
  case $dkml_host_abi,$abi_pattern,$HOST_ARCH in
    darwin_*,macos-android*,*)
      brew install --cask temurin
      ;;
    linux_x86_64,*-android*,*|linux_*,*-android*,x86_64)
      # We use a binary, relocatable download that survives a container restart in case
      # Java is needed at CMake build time. If we had used a yum/apt install, we would be
      # re-running yum/apt every time we opened container.
      wget "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.6%2B10/OpenJDK17U-jdk_x64_linux_hotspot_17.0.6_10.tar.gz" \
        --no-verbose -O java.tar.gz
      printf "%s  %s" a0b1b9dd809d51a438f5fa08918f9aca7b2135721097f0858cf29f77a35d4289 java.tar.gz | \
        sha256sum -c
      java_base=jdk-17.0.6+10 ;;
    linux_x86,*-android*,*)
      wget "https://cdn.azul.com/zulu/bin/zulu17.40.19-ca-jdk17.0.6-linux_i686.tar.gz" \
        --no-verbose -O java.tar.gz
      printf "%s  %s" 7466df603829fd075298181c2a3adb11aadffa134746b9bb96e69c44e1844a3e java.tar.gz | \
        sha256sum -c
      java_base=zulu17.40.19-ca-jdk17.0.6-linux_i686 ;;
  esac
}
android_sdk=
download_android_cmdline_tools() {
  case $dkml_host_abi,$abi_pattern in
    darwin_*,macos-android*)
      brew install --cask android-commandlinetools
      if [ -x /opt/homebrew/bin/sdkmanager ]; then
        android_sdk=/opt/homebrew/share/android-commandlinetools
      else
        android_sdk=/usr/local/share/android-commandlinetools
      fi
      ;;
    linux_*,*-android*)
      wget "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" \
        --no-verbose -O commandlinetools.zip
      printf "%s  %s" bd1aa17c7ef10066949c88dc6c9c8d536be27f992a1f3b5a584f9bd2ba5646a0 commandlinetools.zip | \
        sha256sum -c
      android_sdk="$destination_dir/android-sdk" ;;
    windows_*,*-android*)
      wget "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip" \
        --no-verbose -O commandlinetools.zip
      printf "%s  %s" 696431978daadd33a28841320659835ba8db8080a535b8f35e9e60701ab8b491 commandlinetools.zip | \
        sha256sum -c
      android_sdk="$destination_dir/android-sdk" ;;
  esac
}
download_cmake
download_ninja
download_java
download_android_cmdline_tools
#   Clean
rm -rf \
  "${destination_dir:?}/android-sdk" \
  "${destination_dir:?}/bin" \
  "${destination_dir:?}/conf" \
  "${destination_dir:?}/doc" \
  "${destination_dir:?}/include" \
  "${destination_dir:?}/jmods" \
  "${destination_dir:?}/legal" \
  "${destination_dir:?}/lib" \
  "${destination_dir:?}/man" \
  "${destination_dir:?}/NOTICE" \
  "${destination_dir:?}/release" \
  "${destination_dir:?}/share"
#   Handle tarball
if [ -e cmake.tar.gz ] && [ -n "$cmake_base" ]; then
  echo "Expanding CMake ..."
  tar xCfz "$destination_dir" cmake.tar.gz
  rm -f cmake.tar.gz
  if [ -e "$destination_dir/$cmake_base/CMake.app" ]; then
      rsync -a "$destination_dir/$cmake_base/CMake.app/Contents/" "$destination_dir"
  else
      rsync -a "$destination_dir/$cmake_base/" "$destination_dir"
  fi
  rm -rf "${destination_dir:?}/$cmake_base/"
fi
if [ -e java.tar.gz ] && [ -n "$java_base" ]; then
  echo "Expanding Java ..."
  tar xCfz "$destination_dir" java.tar.gz
  rm -f java.tar.gz
  rsync -a "$destination_dir/$java_base/" "$destination_dir"
  rm -rf "${destination_dir:?}/$java_base/"
fi
#   Handle zip
if [ -e cmake.zip ] && [ -n "$cmake_base" ]; then
  echo "Expanding CMake ..."
  unzip -q cmake.zip -d "$destination_dir"
  rm -f cmake.zip
  rsync -a "$destination_dir/$cmake_base/" "$destination_dir"
  rm -rf "${destination_dir:?}/$cmake_base/"
fi
if [ -e ninja.zip ]; then
  echo "Expanding Ninja ..."
  unzip -q ninja.zip -d "$destination_dir/bin"
  rm -f ninja.zip
fi
if [ -e commandlinetools.zip ] && [ -n "$android_sdk" ]; then
  echo "Expanding Android Command Line Tools ..."
  install -d "$android_sdk/cmdline-tools"
  unzip -q commandlinetools.zip -d "$android_sdk/cmdline-tools"
  rm -f commandlinetools.zip
  mv "$android_sdk/cmdline-tools/cmdline-tools" "$android_sdk/cmdline-tools/latest"
fi
#   Handle Python wheel
if [ -e cmake.whl ] && [ -n "$cmake_majmin_ver" ]; then
  echo "Expanding CMake ..."
  unzip -q cmake.whl 'cmake/data/**'
  rm -f cmake.whl
  set +f
  install -d "$destination_dir/share" "$destination_dir/doc" "$destination_dir/bin"
  mv cmake/data/bin/* "$destination_dir/bin/"
  rm -rf "$destination_dir/share/cmake-$cmake_majmin_ver" "$destination_dir/doc/cmake-$cmake_majmin_ver" "$destination_dir/doc/cmake"
  mv cmake/data/share/cmake-$cmake_majmin_ver "$destination_dir/share/"
  if [ -e cmake/data/doc/cmake ]; then # Windows wheel
    mv cmake/data/doc/cmake "$destination_dir/doc/"
  fi
  if [ -e cmake/data/doc/cmake-$cmake_majmin_ver ]; then # Linux wheel
    mv cmake/data/doc/cmake-$cmake_majmin_ver "$destination_dir/doc/"
  fi
  set -f
  #   other dirs: aclocal bash-completion emacs vim
  rm -rf cmake/data/share
  #   be pedantic. if we don't know about a directory, it may be important. so error
  #   if some directory is non-empty
  rmdir cmake/data/bin cmake/data/doc
  rmdir cmake/data
fi

# Install the latest Diskuv supported Android NDK version,
# but only a Long Term Support ("LTS") version. The LTS version is good for
# basic command line tools, not necessarily for compilation.
# Ex. 23.1.7779620
# See https://developer.android.com/ndk/downloads/revision_history
ndk_lts=23.1.7779620
install_ndk_lts() {
  if [ -n "$android_sdk" ]; then
    _destination_dir_abspath=$(cd "$destination_dir" && pwd)
    sdk_manager() {
      JAVA_HOME="$_destination_dir_abspath" "$android_sdk/cmdline-tools/latest/bin/sdkmanager" "$@"
    }
    yes | sdk_manager --licenses > /dev/null
    sdk_manager --install "ndk;$ndk_lts"
    install -d "$destination_dir/share"
    _android_sdk_abspath=$(cd "$android_sdk" && pwd)
    rm -rf "$destination_dir/share/android-sdk"
    ln -s "$_android_sdk_abspath/ndk/$ndk_lts" "$destination_dir/share/android-sdk"
  fi
}
install_ndk_lts

echo "Done build tools download."
