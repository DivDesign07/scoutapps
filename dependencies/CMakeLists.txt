# Recommendation: Place this file in source control.
# Auto-generated by `./dk dksdk.project.new` of SquirrelScout.
#
# You can and should edit this file as you add dependencies.
# The auto-generated dependencies include a mix of C and OCaml
# to help you understand how to grab both types of dependencies.

include(DkSDKProject)
DkSDKProject_AddDependencies()

# --- Declare Dependencies ---

# >>> If you have any FetchContent_Declare(), this is the place
# >>> to put them.

# >>> If you have any DkSDKProject_DeclareAvailable(), this is the place
# >>> to put them.

# DkSDKProject_DeclareAvailable(capnp 
#     CONSTRAINT ">= 3.6.0"
#     FINDLIBS capnp 
# )

DkSDKProject_DeclareAvailable(qrc
    CONSTRAINT ">= 0.1.0"
    FINDLIBS qrc 
)

DkSDKProject_DeclareAvailable(ocamlbuild
    CONSTRAINT ">= 0.14.2"
    FINDLIBS ocamlbuildlib
)

DkSDKProject_DeclareAvailable(vector
    CONSTRAINT ">= 1.0.0"
    FINDLIBS vector 
)

DkSDKProject_DeclareAvailable(yojson
    CONSTRAINT ">= 2.1.0"
    FINDLIBS yojson 
)

# [core] is a Jane Street library. Jane Street, because it does not have a Windows
# test system, frequently has Windows problems. So DkSDK and DkML usually avoid
# Jane Street libraries except a few low-dependencies packages like [base] and
# some PPX libraries. Example: https://github.com/janestreet/core/pull/166
# ==> Avoid [core]!
DkSDKProject_DeclareAvailable(core
    CONSTRAINT ">= 0.16.0"
    FINDLIBS core base_for_tests command core_top filename_base heap_block univ_map validate 
)

DkSDKProject_DeclareAvailable(base64
    CONSTRAINT ">= 3.5.1"
    FINDLIBS base64
)


    
    
    


# --- Which Dependencies Will Be Available To Targets ---

# Using DkSDKProject_DeclareAvailable() alone does not pull it into CMake.
# You also have to use DkSDKProject_MakeAvailable(xxx FINDLIBS yyy) and use a
# target_link_libraries() on one of the `yyy`.
DkSDKProject_MakeAvailable(
        cmdliner
        fmt
        logs

        # required by capnp
        stdint

        capnp_ocaml
        qrc
        vector
        yojson
        core
        base64

        # "Build tools" that must run on the build host.
        # Implementation: Built by CMake directly.

        capnproto_and_host_tools

        # "Development tools".
        # Implementation: Built by Dune.
        # Semantically, very little difference from Build tools, except
        # they are built for both the host and the target
        # ABIs. The target ABI is almost always useless.
        #odoc
        #
        #       ocaml_lsp_server relies on fiber. This DkSDK version
        #       does not support a declared package having a dependency
        #       on another declared package. That is because dependency
        #       resolution is an opam thing.
        ocaml_lsp_server
        # ocamlformat + ocamlformat_rpc_lib need to be done together
        #       Or else get: Too many opam files for package "ocamlformat-rpc-lib"
        #
        #       This is a hack though. There should be a better way to express
        #       dependencies.
        ocamlformat ocamlformat_rpc_lib
)
if(CMAKE_OCamlDune_DUNE_VERSION VERSION_GREATER_EQUAL 3.7.0)
    # ocaml_lsp_server needs fiber.3.6.2 (or fiber.3.7.0) and menhir
    DkSDKProject_MakeAvailable(fiber menhir)
endif()

DkSDKProject_MakeAvailable(TEST
        tezt)

option(BUILD_LIBEV "Build libev. Defaults to TRUE on Unix (macOS, Linux, etc). When TRUE, will use more efficient libev library rather than select() for I/O polling on Unix" ${UNIX})
if(BUILD_LIBEV)
    DkSDKProject_MakeAvailable(libev)
endif()

add_subdirectory(lwt)
add_subdirectory(sqlite3)
add_subdirectory(zxing)

DkSDKRequire_Add(FFI OCaml PRERELEASE)
