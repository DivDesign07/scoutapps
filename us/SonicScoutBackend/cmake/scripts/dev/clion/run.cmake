# Recommendation: Place this file in source control.
# Auto-generated by `./dk dksdk.project.new` of DkHelloWorld.

set(default_GDK_SCALE 1.5)

function(help)
    cmake_parse_arguments(PARSE_ARGV 0 ARG "" "MODE" "")
    if(NOT ARG_MODE)
        set(ARG_MODE FATAL_ERROR)
    endif()
    message(${ARG_MODE} "usage: ./dk user.dev.clion.run

Run CLion. Installs CLion if it hasn't been installed.

Arguments
=========

HELP
  Print this help message.

GDK_SCALE
  Font scaling. Defaults to ${default_GDK_SCALE}.
  Takes effect only in WSL2.
")
endfunction()

function(run)
    # Get helper functions from this file
    include(${CMAKE_CURRENT_FUNCTION_LIST_FILE})

    set(noValues HELP)
    set(singleValues GDK_SCALE)
    set(multiValues)
    cmake_parse_arguments(PARSE_ARGV 0 ARG "${noValues}" "${singleValues}" "${multiValues}")

    if(ARG_HELP)
      help(MODE NOTICE)
      return()
    endif()

    if(ARG_GDK_SCALE)
        set(GDK_SCALE ${ARG_GDK_SCALE})
    else()
        set(GDK_SCALE ${default_GDK_SCALE})
    endif()

    # Install CLion if not done already
    include(${CMAKE_CURRENT_FUNCTION_LIST_DIR}/clion-install.cmake)
    clion_install__install()

    # Output variables
    get_clion_version(clion_VER)
    get_clion_runner(clion_RUNNER)

    # Check if running in WSL2
    set(wsl2)
    if (NOT wsl2 AND EXISTS /proc/version)
        file(STRINGS /proc/version ms_proc_version REGEX "[Mm]icrosoft")
        if (ms_proc_version)
            set(wsl2 ON)
        endif ()
    endif ()
    if (NOT wsl2 AND DEFINED ENV{WSL_INTEROP})
        set(wsl2 ON)
    endif ()

    # Get DISPLAY variable
    set(env_ARGS)
    if (NOT DEFINED ENV{DISPLAY} AND wsl2)
        # 1. https://x410.dev/cookbook/wsl/using-x410-with-wsl2
        if (EXISTS /etc/resolv.conf)
            execute_process(COMMAND
                    sh -c [[grep nameserver /etc/resolv.conf | awk '{print $2; exit;}']]
                    OUTPUT_VARIABLE display OUTPUT_STRIP_TRAILING_WHITESPACE)
            list(APPEND env_ARGS DISPLAY=${display}:0.0 GDK_SCALE=${GDK_SCALE})
        endif ()
    endif ()

    execute_process(COMMAND
            ${CMAKE_COMMAND} -E env ${env_ARGS} -- ${clion_RUNNER}
            COMMAND_ECHO STDERR
            COMMAND_ERROR_IS_FATAL ANY)
endfunction()